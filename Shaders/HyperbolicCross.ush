
float sdHyperbolicCross( in float2 p, float k )
{
	
	float s = 1.0/k - k;
	p = p*s;
	
	p = abs(p);
	p = (p.x>p.y) ? p.yx : p.xy;
	
	p += k;
    
	float x2 = p.x*p.x/16.0;
	float y2 = p.y*p.y/16.0;
	float r = (p.x*p.y-4.0)/12.0;
	float q = y2-x2;
	float h = q*q-r*r*r;
	float u;
	if( h<0.0 )
	{
		float m = sqrt(r);
		u = m*cos( acos(q/(r*m) )/3.0 );
	}
	else
	{
		float m = pow(sqrt(h)+q,1.0/3.0);
		u = (m+r/m)/2.0;
	}
	float w = sqrt(u+x2);
	float x = p.x/4.0-w+sqrt(2.0*x2-u+(p.y-x2*p.x*2.0)/w/4.0);
    

	x = max(x,k);
    

	float d = length( p-float2(x,1.0/x) ) / s;

	return p.x*p.y < 1.0 ? -d : d;
}


const float scale=1.5;

float2 p=scale*(2*uv);
float2 m=scale*2;
float px=scale*2;

float k=0.5+0.45*sin(3.14159*time);

float d = sdHyperbolicCross(p, k);

float3 col=(d>0)?float3(0.9,0.6,0.3):float(0.65,0.85,1.0);
col*=1.0 - exp2(-10.0*abs(d));
col*=0.7 + 0.2*cos(70.0*d);
col = lerp( col, float3(1,1,1), 1.0-smoothstep(0.0,4.0*px,abs(d)) );



return float4(col,1.0);