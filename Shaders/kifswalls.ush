#define PI 3.14159265359
#define FLT_MAX 3.402823466e+38

// https://www.shadertoy.com/view/4dS3Wd
float hash(float p) { p = frac(p * 0.011); p *= p + 7.5; p *= p + p; return frac(p); }

float sminCubic( float a, float b, float k )
{
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*h*k*(1.0/6.0);
}

float opExtrussion( in float3 p, in float sdf, in float h )
{
    float2 w = float2( sdf, abs(p.z) - h );
    return min(max(w.x,w.y),0.0) + length(max(w,0.0));
}

// https://www.shadertoy.com/view/wlyBWm
float2 smoothrepeat_asin_sin(float2 p, float smooth_size, float size)
{
    p /= size;
    p = asin(sin(p)*(1.0-smooth_size));
    return p * size;
}

//--------------

// don't remember were i took this from but I think I started from here 
// https://www.researchgate.net/publication/300124211_Interactive_Procedural_Building_Generation_Using_Kaleidoscopic_Iterated_Function_Systems
float2 dKifs(float2 p, float2 c, float s, float t1, float t2)
{
    float r2 = p.x*p.x + p.y*p.y;
    float i;
    for (i = 0.; i < 6. && r2 < 1000.; i++)
    {
        p *= float2x2(cos(t1), sin(t1), -sin(t1), cos(t1));
        p = abs(p);
        if (p.x - p.y < 0.)
        {
            float x1 = p.y;
            p.y = p.x;
            p.x = x1;
        }

        p *= float2x2(cos(t2), sin(t2), -sin(t2), cos(t2));

        p.x = s*p.x - c.x*(s - 1.);
        p.y = s*p.y;
        if (p.y > 0.5*c.y*(s - 1.)) p.y -= c.y*(s - 1.);

        p.y += 0.1 * s;
        p.y *= p.y * 0.45;
        p.x -= 0.2 * s;

        r2 = p.x*p.x + p.y*p.y;
    }

    return float2((sqrt(r2) - 2.) * pow(s, -i), i);
}

float3 camPos;
float2 map(float3 p)
{
    float d = FLT_MAX;
    float mat = -1.;

    float2 f;
    // extruded fractal
    {
        float3 q = p;
        q.xy = smoothrepeat_asin_sin(p.xy, 0.04, 4.0);
        float c = 15.;
        float zId = ceil((q.z + 0.5*c) / c);
        q.z = frac(q.z + 0.5*c) - 0.5*c;

        float r1 = 0.2 + hash(zId*1234.)*0.75 + smoothstep(0., 0.2, sin((camPos.z + 1.5) * PI / 15.)) * 0.15;
        float r2 = lerp(0.2, 0.5, hash(zId*4312.));
        f = dKifs(q.xy * 0.2, float2(1., 1.), 3., r1, r2);

        if (f.x < d) mat = 0.;
        d = min(d, opExtrussion(q, f.x, 0.5)) - 0.002;
    }

    // plane
    {
        float3 q = p;
        float c = 15.;
        q.z = frac(q.z + 0.5*c) - 0.5*c;

        q.xy *= 0.5;
        float s = 1.0;
        float t = 0.0;
        for (int i = 0; i < 2; i++)
        {
            t += s * 0.5 * (cos(6.2831 * q.x + iTime * 5.) + cos(6.2831 * q.y + iTime * 2.));
            s *= 0.5 + 0.1*t;
            q.xy = 0.97 * float2x2(1.6, -1.2, 1.2, 1.6) * q.xy + (t - 0.5) * 0.2;
        }

        float dP = abs(q.z - 0.01 - (cos(q.x*4. + iTime)*0.5 + 0.5) * 0.02);
        if (dP - 0.3 < d) mat = 1.;
        d = sminCubic(d, dP, 0.6);
    }

    return float2(d, mat);
}

// https://iquilezles.org/articles/normalsSDF
float3 calcNormal(float3 pos)
{
    float2 e = float2(1.0, -1.0) * 0.5773;
    const float eps = 0.0005;
    return normalize(e.xyy * map(pos + e.xyy * eps).x +
        e.yyx * map(pos + e.yyx * eps).x +
        e.yxy * map(pos + e.yxy * eps).x +
        e.xxx * map(pos + e.xxx * eps).x);
}

// https://www.shadertoy.com/view/MdS3Rw
float ao(float3 v, float3 n)
{
    float sum = 0.0;
    float att = 3.0;
    float aoStep = 0.1;
    float aoScale = 0.3;
    float len = aoStep;
    for (int i = 0; i < 4; i++)
    {
        sum += (len - map(v + n * len).x) * att;

        len += aoStep;

        att *= 0.5;
    }

    return max(1.0 - sum * aoScale, 0.0);
}

// https://www.shadertoy.com/view/flGyDd
// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM
float3 sRGB(float3 t)
{
    return lerp(1.055 * pow(t, float3(1. / 2.4)) - 0.055, 12.92 * t, step(t, float3(0.0031308)));
}

float3 aces_approx(float3 v)
{
    v = max(v, 0.0);
    v *= 0.6f;
    float a = 2.51f;
    a = 2.;
    float b = 0.03f;
    float c = 2.43f;
    c = 1.;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((v*(a*v + b)) / (v*(c*v + d) + e), 0.0f, 1.0f);
}

float3 postProcess(float3 col)
{
    col -= 0.1;
    col += col*col*0.4;
    col = aces_approx(col);
    col = sRGB(col);
    return col;
}

float2 march(float3 ro, float3 rd, float tmax, inout float t, int iMax, float e, float hStep)
{
    float2 h;
    for (int i = 0; i < iMax; i++)
    {
        float3 pos = ro + t*rd;
        h = map(pos);
        if (h.x < e || t > tmax) break;
        t += h.x * hStep;
    }
    return h;
}

float3 shade(float3 pos, float3 nor, float3 ro, float3 rd, float t)
{
    float3 col = float3(0.15, 0.25, 0.4);
    float m = frac(pos.z, 15.);
    col *= pow(1. - frac(pos.z, 15.) / 15., 80.) * 6.5;

    float fractal = 1. - step(m, 0.1);
    float3 lDir = normalize(float3(0.57703));
    lDir = normalize(float3(0.3, 0.6, 0.6));
    float dif = clamp(dot(nor, lDir), 0.0, 1.0);
    float3 ref = reflect(rd, nor);
    float spec = max(dot(ref, lDir), 0.0);
    col += (spec*0.5 + dif * float3(0.1, 0.15, 0.25)*0.5) * fractal * 0.8;

    float plane = step(m, 0.3);
    col = clamp(col + -0.2 * plane, 0., 1.);
    col += plane * col * col * 0.7;

    return col;
}

#define AA 2

void mainImage(out float4 fragColor, in float2 fragCoord)
{
    float3 ro = float3(0., 0., 15. - iTime * 2.5);
    camPos = ro;
    float3 ta = float3(0.0, 0., 0.0 - iTime * 2.5);
    // camera matrix
    float3 ww = normalize(ta - ro);
    float3 uu = normalize(cross(ww, float3(0.0, 1.0, 0.0)));
    float3 vv = cross(uu, ww);

    // render
    float3 tot = float3(0.0);

#if AA > 1
    for (int m = 0; m < AA; m++)
        for (int n = 0; n < AA; n++)
        {
            // pixel coordinates
            float2 o = float2(float(m), float(n)) / float(AA) - 0.5;
            float2 p = (-iResolution.xy + 2.0*(fragCoord + o)) / iResolution.y;
#else    
    float2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;
#endif

            // create view ray
            float3 rd = normalize(p.x * uu + p.y * vv + 1.5 * ww);

            rd.xy *= float2x2(cos(sin(iTime * PI / 7.5)*0.4), sin(sin(iTime * PI / 7.5)*0.4));
            rd.xz *= float2x2(cos(sin(iTime * PI / 7.5 * 2.)*0.15), sin(sin(iTime * PI / 7.5 * 2.)*0.15));

            // raymarch
            float tmax = 40.0;
            float t = 0.0;
            float2 h = march(ro, rd, tmax, t, 40, 0.005, 0.8);

            // shading/lighting    
            float3 col = float3(0.);
            if (t < tmax)
            {
                float3 pos = ro + t * rd;
                float3 nor = calcNormal(pos);
                col = shade(pos, nor, ro, rd, t);

                float ao = clamp(pow(ao(pos, nor), 5.)*3., 0., 1.);
                col = float3(ao) * col;
                // thin layer transparent material or something 
                if (h.y == 1.) {
                    float3 ro2 = pos - nor * 0.5;
                    // interpolation suggest by alro ty :)
                    float ior = lerp(1.2, 1., smoothstep(0.9, 1., cos(ro.z*PI / 7.5 - 0.3)));
                    float3 rd2 = refract(rd, nor, ior);
                    // raymarch again
                    tmax = 60.;
                    t = 0.;
                    float2 h2 = march(ro2, rd2, tmax, t, 50, 0.01, 1.);
                    // shade again
                    float3 col2 = float3(0.);
                    if (t < tmax) {
                        float3 pos2 = ro2 + t * rd2;
                        float3 nor2 = calcNormal(pos2);
                        col2 = shade(pos2, nor2, ro2, rd2, t);
                    }
                    col = lerp(col, col2, 0.5);
                }
            }

            col = postProcess(col); // doing it here reduces some artifacts
            tot += col;
#if AA > 1
        }
    tot /= float(AA*AA);
#endif

    //tot = postProcess(tot);

    fragColor = float4(tot, 1.0);
}
